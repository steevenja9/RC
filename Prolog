<h1>Ejercicios de programación declarativa con Prolog</h1>


 Principio de Inducción Matemático
 Quiero demostrar si P es cierta para todos los elementos 
 de un conjunto S
 
 El conjunto S tiene que ser ordenable
 
 n0<n1<n2< ........ < n, Para todo n que pertenece al S
 
 1) P tiene que ser para n0
    P(n0)
 
 2) si P es verdad para N-1 tambien lo sera para n0
    P(N-1) -> P(N)

En logica se escribe asi:
a -> b
En prolog
b :- a

Variables en Prolog 

Una variable en Prolog cuando se le asigna un valor,
esta nunca cambia en el ambito.

Ejemplo: 
          Constante = x en minuscula
          Variable = X la primera en mayuscula
          Variable Anonima =(" _ ")
          variable temporal = (" _41080 ") 

Simbolos delante de la variable
length(+entrada,-salida).

length(?L,?Tam).
% ? Esto puede estar libre o estanciado. Se puede usar el predicado de forma reversible
Ejemplo:
  length([1,2,3],Tam).
   Tam = 3.
   length(L,3).
   L= [_1,_2,_3]. Eso es verdad cuando una lista tiene 3 variables. 
   
Restricciones se ponen al principio para evitar llamadas innecesarias y siempre que se tenga el valor de las variables

Ejemplo:
 X is 1 + length([1,2,3],L). ERROR no se puede sumar VERDADERO FALSO con un Valor
 length([1,2,3],L), X es L + 1. Eso es verdad cuando L=3 Y X= 4
 
 

Prolog - Primer programa

natural(1).

% natural(n-1)  -> natural(n).

natural(N) :- N > 1, N2 IS N -1 , natural(N2). //por recursión


a /\ b /\ c /\ d  -> e
----------------     --------------------------
Antecedente          Consecuente

1 Listas
 
 ===========================================================
% Lista = [Cab|Resto]. 
% [_]= variable anonima que no utilizaremos 

                        P(N-1) -> P(N)
                        P(N) :- P(N-1)
                            
==================================================================================
%Dividir una lista
length(L1,3), append(L1,L2,[1,2,3,4,5,6,7]).
L1 = [1,2,3]. 
L2 = [4,5,6,7].


==================================================================================
%Definir la relación primero(?L,?X) que se verifique si X es el primer 
%elemento de la lista L.

%primero(+L1,-X).  //Parametris de Entrada(+L1), Salida(-X).
primero([X|_],X).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Definir la relación resto(?L1,?L2) que se verifique si L2 es la 
% lista obtenida a partir de la lista L1 suprimiendo el primer elemento

%resto(+Lista1,-Lista2).
resto([_|Res],Res).
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

Definir la relación cons(?X,?L1,?L2) que se verifique si L2 es la lista obtenida añadiéndole
X a L1 como primer elemento. Por ejemplo,

%cons(+X,+L1,-L2).
cons(X,L1,[X|L1]).
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
                                  P(N) ->  P(N-1)

%Definir la relación pertenece(?X,?L) que se verifique si X es un elemento de la lista L. Por
ejemplo.
%pertenece(+X,+L1).

pertenece(X,[X|_]). // caso base al que reducimos por recursion
pertenece(X, [_|Res]) :- pertenece(X,Rest). // por recursion
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% Definir la relación conc(?L1,?L2,?L3) que se verifique si L3 es la lista obtenida escribiendo
% los elementos de L2 a continuación de los elementos de L1.

conc([],L2,L2). // caso base al que reducimos por recursion
conc([Cab|Res],L2,[Cab|L3]) :- conc(Res,L2,L3).
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

            Uso del append.

? - append ([a, b], [c], X).
X = [a, b, c].

? - append (X, [Último], [a, b, c]).
X = [a, b],
Último = c.

? - append ([a, b], Más, Lista).
List = [a, b | Más].

--------------------------------------------------------------------------------------

?- select(10,[1,2,3],R).
false.

?- select(2,[1,2,3],R).
R = [1, 3] ;
false.


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

                                P(N) ->  P(N-1)
          
Definir la relación inversa(+L1,-L2) que se verifique si L2 es la lista obtenida invirtiendo
el orden de los elementos de la lista L1.

%inversa(+L1,-L2).

inversas([],[]).
inversa([Cab|Res],L2):- inversa(Res,L3),append(L3,[Cab],L2).
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

Un palíndromo es una palabra que se lee igual en los dos sentidos, por ejemplo “oso”. Definir
la relación palíndromo(+L) que se verifique si la lista L es un palíndromo

palíndromo(L) :-reverse(L,L).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

Definir la relación último(?X,?L) que se verifique si X es el último elemento de la lista L

ultimo(X,L1).
ultimo(X,[X]).
ultimo(X,[Cab|Res]) :- ultimo(X,Res).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

9 Definir lar relación penúltimo(?X,?L) que se verifique si X es el penúltimo elemento de la
lista L

penultimo(X,L1).
penultimo(X,[X,_]).
penultimo(X,[_,Y|Res]):- penultimo(X,[Y|Res]).

penultimo_2(X,L) :- penultimo_2(_,[X,_],L)
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

Definir la relación seleciona(?X,?L1,?L2) que se verifique si L2 es la lista obtenida
eliminando una ocurrencia de X en L1

selecciona(X,L1,L2).
selecciona(X,[X|Res],Res).
selecciona(X,[Cab|Res], [Cab|L2]) :- selecciona(X,Res,L2)

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

Definir la relación inserta(?X,?L1,?L2) que se verifique si L2 es una lista obtenida insertando X en L1.

inserta(X,L1,L2).
inserta(X,L1,L2) :- select(X,L2,L1).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

Definir la relación sublista(?L1,?L2) que se verifique si L1 es una sublista de L2.

[c,d] , [a,b,c,d]

sublista(L1,L2) :- append(_L3,L5,L2),append(L1,_L5,L4).
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

Definir la relación permutación(+L1,?L2) que se verifique si L2 es una permutación de
L1. 
permutacion([],[]).
permutacion(L1,[Cab|Res]):- select(Cab,L1,L3), permutacion(L3,L2).

permutacion_2([Cab|Res],L2):- append(Res,L2,Cab). //COMPROBAR

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

Definir la relación todos_iguales(+L) que se verifique si todos los elementos de la lista L
son iguales entre sí

todos_iguales(+L) 
todos_iguales([]).
todos_iguales([_]).
todos_iguales([Cab,Cab|Res]) :- Select(Cab|Res). 

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
elemento_enesimo(1, [Cab|_], Cab).
elemento_enesimo(N, [_|Resto], Elem):- N > 1, 
  N2 is N-1, elemento_enesimo(N2, Resto, Elem).

% elemento_enesimo(3, [1,2,3,4,5,6,7], Elem)
% 
% elemento_enesimo(2, [2,3,4,5,6,7], Elem) 
%                  -  -------------
%				N-1	    Resto
